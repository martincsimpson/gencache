Done:
    - Ruby API 
    - Cache configuration
    - Implementation of code blocks
        - Stale allowed
        - Smart Refresh
        - Data fetch
    - Cache Insert
    - Cache retrieval
    - Background refresh job
    ---
    - packaging as a gem
    - In-memory storage driver
    - Implement Singletons (not thread safe) for Storage Drivers
    - Working cache fetch/set using local_test.rb.
    - Add logging
    - Testing of background fetcher
    ---
    - namespace: "merchant" (dynamic)

Next Implementation Steps:
    - Cassandra backing store with migrations
    - Tests

Discussion items:
    - to support different imeplementations per merchant, I think we should setup multiple cache's (reading all merchants from ctx)
      this method has some advantages:
        - Less complicated primary keys
        - Flushing the cache is a simple `truncate <product_cache_gstar>`
        - Better partitioning of data and durability
      it also comes with some disadvantages
        - Creating the cassandra tables on the fly and triggering the replication of this table will be a bit more difficult